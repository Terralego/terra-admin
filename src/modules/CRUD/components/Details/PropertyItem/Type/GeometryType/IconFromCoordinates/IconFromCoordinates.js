import React from 'react';
import PropTypes from 'prop-types';
import geojsonExtent from '@mapbox/geojson-extent';
import { geomTypes } from '../../../../../../../RA/DataSource/index';


const getCoordinatesFromType = (type, coordinates) => {
  if (type === 'MultiPolygon') {
    return coordinates.flat();
  }
  if (type === 'LineString') {
    return [coordinates];
  }
  return coordinates;
};


/**
 * Render an SVG icon from geospatial coordinates
 *
 * @param {Object} { coordinates, type, width, height }
 * @returns An SVG generated by type and coordinates
 */
const IconFromCoordinates = ({ coordinates, type, width, height }) => {
  if (!type && !coordinates.length) {
    return null;
  }

  if (type.includes('Point')) {
    return (
      <svg viewBox={`0 0 ${width} ${height}`} width={width} height={height}>
        <circle cx={width / 2} cy={height / 2} r="2" fill="currentColor" />
      </svg>
    );
  }

  const [west, south, east, north] = geojsonExtent({ type: 'Point', coordinates });

  const scaleToSVG = (num, min, max, scaledMax = width, scaledMin = 0) => (
    (((scaledMax - scaledMin) * (num - min)) / (max - min)) + scaledMin
  );

  const coordinatesToSVG = getCoordinatesFromType(type, coordinates).map(coordinate => (
    coordinate.map(subCoordinate => (
      subCoordinate.map((item, i) => (
        i
          ? scaleToSVG(
            (north - (item - south)),
            south,
            north,
            height,
          )
          : scaleToSVG(item, west, east)
      ))
    ))
  ));

  return (
    <svg viewBox={`0 0 ${width} ${height}`} width={width} height={height}>
      {coordinatesToSVG.map(subCoordinate => {
        const pathD = subCoordinate.map(item => item.join(',')).join(' ');
        return <path key={pathD} d={`M${pathD}`} fill="none" stroke="currentColor" />;
      })}
    </svg>
  );
};

IconFromCoordinates.propTypes = {
  coordinates: PropTypes.arrayOf(PropTypes.oneOfType([
    PropTypes.number, PropTypes.array,
  ])),
  type: PropTypes.oneOf(Object.values(geomTypes)),
  width: PropTypes.number,
  height: PropTypes.number,
};

IconFromCoordinates.defaultProps = {
  coordinates: [],
  type: undefined,
  width: 40,
  height: 40,
};

export default IconFromCoordinates;
